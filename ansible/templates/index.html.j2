<!DOCTYPE html>
<html>
  <head>
    <title>{{ html_page_title }}</title>
    <script src="https://aframe.io/releases/1.2.0/aframe.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/seedrandom/3.0.5/seedrandom.min.js" integrity="sha512-+Ru50BzEpZjlFzVnjSmJfYFPFfY2hS0Kjlu/IvqaJoux7maF5lJrRVUJWJ2LevPls7rd242GLbWEt+zAo4OVVQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <style>
      #sceneContainer {
        width: 800px;
        height: 600px;
      }
    </style>
  </head>
  <body>
    <div>
      <h1>{{ body_page_title }}</h1>
    </div>
    <div>
    <h2>Build: {{ current_time_uuid }}</h2>
    </div>
    <div>
      <h2>Rules of building on <a href="https://pages.github.com/">github pages</a> :</h2>
      <ol>
        <li>Create an entirely public repository on github.com named YOURACCOUNTNAME.github.io .</li>
        <li>No server side component so pages must be regenerated each time.</li>
        <li>Private files may be uploaded but they will need to be encrypted (e.g. using Ansible Vault)</li>
        <li>This means API keys etc will need to be stored in Ansible Vault before being consumed by Ansible, they cannot be made public due to abuse potential.</li>
        <li>No mysql or other database, so data will need to be stored in sqlite or equivalent, or json file to be queried client side.</li>
        <li>As the build is automatic, the commit message has been set to the build id.</li>
      </ol>
    </div>
    <div>
      <h2>Banter</h2>
      <p>
        <a href="https://bantervr.com/">Banter</a> is a Unity-based Social VR platform that users can create worlds built with Unity Assets and <a href="https://aframe.io/">A-Frame</a>.
      </p>
      <h2>
        Rules of creating a Banter space :
      </h2>
      <ol>
        <li>Assets of the scene need to be added to the repository and A-Frame needs to be added to the HTML page.</li>
        <li>The page when loaded into Banter will load as a space.</li>
      </ol>
    </div>
    <div>
      <h2>Linking to a Banter cinematic experience</h2>
      <p>
        There are (at least) 2 different setups for viewing a stream in Banter within their prebuilt cinema :
      </p>
      <ol>
        <li>Vising a space such as the Cinema2D <a href="https://cinema2d.glitch.me">space</a>. The youtube link is hardcoded within the scene, but you can create your own version of the page on <a href="https://glitch.com/">glitch.com</a> by remixing it on the project <a href="https://glitch.com/edit/#!/cinema2d">page</a></li>
        <li>
          Creating and visiting a link to a parameterised version of that page such as <a href="https://cinema2dparameterised.glitch.me/?livestream-type=twitch&livestream-url=https://www.twitch.tv/shoseki/">My Twitch Stream</a>. As of documentation, valid parameters for livestream-type are (twitch or youtube) and URLs must be fully qualified YouTube or Twitch URLs.
        </li>
      </ol>
    </div>
    <div>
      <h2>
        Sample scene "CityGPT" 
      </h2>
      <p>
        The scene below is a demo A-Frame scene generated using ChatGPT an embedded into the page. Feel free to "View Source" on this page to see how it was built.
      </p>
    </div>
    <div id="sceneContainer">
      <a-scene physics="debug: true" embedded>
        <!-- Sky -->
        <a-sky color="#87CEEB"></a-sky>
  
        <a-entity position="0 1.6 0">
       
          <!-- Ground -->
          <a-plane position="0 0 0" rotation="-90 0 0" width="100" height="100" color="#9ACD32" sq-collider></a-plane>
  
          <!-- Buildings -->
          <a-entity id="buildings">
            <!-- Add 100 buildings with random positions and sizes -->
            <script>

              // Get the current URL and its parameters
              const currentUrl = new URL(window.location.href);
              const currentParams = currentUrl.searchParams;

              // Check if the "seed" parameter is present
              if (!currentParams.has('seed')) {
                // Add the "seed" parameter with a default value of 0
                currentParams.set('seed', '0');

                // Update the URL with the additional "seed" parameter
                currentUrl.search = currentParams.toString();

                // Redirect to the updated URL
                window.location.replace(currentUrl.href);
              }

              const NUM_BUILDINGS = 100;
              const BUILDING_COLORS = ["#A9A9A9", "#808080", "#696969"];
              const buildingsEntity = document.querySelector("#buildings");
              const queryString = window.location.search;
              const urlParams = new URLSearchParams(queryString);
              const seed = urlParams.get('seed') || Math.floor(Math.random() * 1000000);
              console.log(`Using seed ${seed}`);
              const random = new Math.seedrandom(seed);
  
              for (let i = 0; i < NUM_BUILDINGS; i++) {
                const building = document.createElement("a-box");
                const x = (random() - 0.5) * 50;
                const z = (random() - 0.5) * 50;
                const height = Math.ceil(random() * 10);
                const width = Math.ceil(random() * 5);
                const depth = Math.ceil(random() * 5);
                const color = BUILDING_COLORS[Math.floor(random() * BUILDING_COLORS.length)];
                building.setAttribute("position", `${x} ${height / 2} ${z}`);
                building.setAttribute("height", height);
                building.setAttribute("width", width);
                building.setAttribute("depth", depth);
                building.setAttribute("color", color);
                building.setAttribute("sq-collider", "sq-collider");
                buildingsEntity.appendChild(building);
              }
            </script>
          </a-entity>
  
        </a-entity>
        <!-- Camera -->
        <a-entity position="0 1.6 0">
          <a-camera></a-camera>
        </a-entity>
      </a-scene>
    </div>
  </body>
</html>